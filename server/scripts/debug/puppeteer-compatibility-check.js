#!/usr/bin/env node

/**
 * Script para verificar compatibilidad de funciones de Puppeteer
 * Verifica que todas las funciones usadas en el c√≥digo sean compatibles con la versi√≥n instalada
 */

const puppeteer = require('puppeteer');

async function checkPuppeteerCompatibility() {
  console.log('üîç Verificando compatibilidad de Puppeteer...\n');

  let browser;
  try {
    // Informaci√≥n de versi√≥n
    console.log('üìã Informaci√≥n de Puppeteer:');
    console.log(`- Versi√≥n instalada: ${require('puppeteer/package.json').version}`);
    
    // Lanzar navegador
    browser = await puppeteer.launch({ 
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    console.log('‚úÖ Navegador lanzado exitosamente');

    // Verificar funciones cr√≠ticas
    console.log('\nüîß Verificando funciones disponibles:');
    
    // Funci√≥n 1: setUserAgent
    try {
      await page.setUserAgent('test');
      console.log('‚úÖ setUserAgent - Disponible');
    } catch (error) {
      console.log('‚ùå setUserAgent - Error:', error.message);
    }

    // Funci√≥n 2: setExtraHTTPHeaders
    try {
      await page.setExtraHTTPHeaders({ 'Accept': 'text/html' });
      console.log('‚úÖ setExtraHTTPHeaders - Disponible');
    } catch (error) {
      console.log('‚ùå setExtraHTTPHeaders - Error:', error.message);
    }

    // Funci√≥n 3: setViewport
    try {
      await page.setViewport({ width: 375, height: 812 });
      console.log('‚úÖ setViewport - Disponible');
    } catch (error) {
      console.log('‚ùå setViewport - Error:', error.message);
    }

    // Funci√≥n 4: evaluateOnNewDocument
    try {
      await page.evaluateOnNewDocument(() => {
        console.log('test');
      });
      console.log('‚úÖ evaluateOnNewDocument - Disponible');
    } catch (error) {
      console.log('‚ùå evaluateOnNewDocument - Error:', error.message);
    }

    // Funci√≥n 5: goto
    try {
      await page.goto('https://www.google.com', { 
        waitUntil: 'domcontentloaded', 
        timeout: 10000 
      });
      console.log('‚úÖ goto con domcontentloaded - Disponible');
    } catch (error) {
      console.log('‚ùå goto - Error:', error.message);
    }

    // Funci√≥n 6: waitForSelector
    try {
      await page.waitForSelector('body', { timeout: 5000 });
      console.log('‚úÖ waitForSelector - Disponible');
    } catch (error) {
      console.log('‚ùå waitForSelector - Error:', error.message);
    }

    // Funci√≥n 7: $eval
    try {
      const title = await page.$eval('title', el => el.textContent);
      console.log('‚úÖ $eval - Disponible');
    } catch (error) {
      console.log('‚ùå $eval - Error:', error.message);
    }

    // Funci√≥n 8: evaluate
    try {
      const result = await page.evaluate(() => document.title);
      console.log('‚úÖ evaluate - Disponible');
    } catch (error) {
      console.log('‚ùå evaluate - Error:', error.message);
    }

    // Funci√≥n DEPRECADA: waitForTimeout (no deber√≠a existir)
    if (typeof page.waitForTimeout === 'function') {
      console.log('‚ö†Ô∏è waitForTimeout - Disponible (pero deprecada)');
    } else {
      console.log('‚úÖ waitForTimeout - Correctamente NO disponible (como esperado)');
    }

    await browser.close();
    
    console.log('\nüéâ Verificaci√≥n de compatibilidad completada!');
    console.log('üí° Si todas las funciones est√°n disponibles, el scraping deber√≠a funcionar correctamente.');

  } catch (error) {
    console.log('\n‚ùå Error durante la verificaci√≥n:');
    console.error(error.message);
    
    if (browser) {
      await browser.close();
    }
    
    process.exit(1);
  }
}

// Ejecutar verificaci√≥n
checkPuppeteerCompatibility().catch(console.error);
